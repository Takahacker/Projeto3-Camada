import struct
import numpy as np
from enlace import *
import cv2
import os
import time

serialName = "/dev/cu.usbmodem2101"  

def cria_datagrama(num_pacote, total_pacotes, payload):
    head = struct.pack('>III', num_pacote, total_pacotes, len(payload))
    eop = b'\xAA\xBB\xCC'  # Exemplo de EOP
    datagrama = head + payload + eop
    return datagrama

def abre_pacote(datagrama):
    head = datagrama[:12]
    num_pacote, total_pacotes, payload_size = struct.unpack('>III', head)
    payload = datagrama[12:-3]
    return num_pacote, total_pacotes, payload_size, payload

def main():
    try:
        print("Iniciou o main do server üöÄ")
        com1 = enlace(serialName)
        com1.enable()
        print("Abriu a comunica√ß√£o com a porta serial üì°")

        # Espera handshake
        print("Esperando handshake do client üôÑ‚åõÔ∏è")
        time.sleep(0.5)
        rxBuffer, _ = com1.getData(15)  # Recebe um datagrama completo (12 head + 0 payload + 3 EOP)

        if rxBuffer[-3:] == b'\xAA\xBB\xCC':  # Verifica o EOP
            print("Handshake recebido ü§ù")
            ack = struct.pack('>III', 0, 0, 0) + b'\xAA\xBB\xCC'
            com1.sendData(ack)  # Confirma√ß√£o do handshake
        else:
            print("‚ùå Erro no handshake, encerrando comunica√ß√£o.‚ùå üòî")
            negativo = """
            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£¥‚°∂‚†∂‚£∂‚£¶‚£§‚£∂‚£∂‚£∂‚£¶‚£§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚°ø‚†ã‚¢°‚£¥‚£æ‚†ø‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†à‚¢ª‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
            ‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£¥‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†ª‚£∑‚£Ñ‚£Ä‚£§‚£∂‚†ø‚†ø‚†ø‚†ø‚†ø‚¢ø‚£∂‚°Ä‚†Ä‚†Ä‚†Ä
            ‚†Ä‚£∏‚°ü‚†õ‚†õ‚†õ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢¥‚£æ‚†ø‚†õ‚†â‚†Ä‚†Ä‚£Ä‚£§‚£Ñ‚£Ä‚£Ä‚£Ω‚£á‚†Ä‚†Ä‚†Ä
            ‚†Ä‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£∑‚£§‚£¥‚£æ‚†ø‚†õ‚†â‚†â‚†â‚†â‚†õ‚†ª‚£ø‚°Ü‚†Ä
            ‚¢∏‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚£è‚†Å‚†Ä‚†Ä‚£Ä‚£†‚£∂‚£∂‚£∂‚£¶‚£§‚£ø‚°á‚†Ä
            ‚¢∏‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ª‚£∑‚£∂‚°ø‚†ü‚†ã‚†Å‚†Ä‚†Ä‚†â‚†ô‚¢ø‚£¶‚†Ä
            ‚†Ä‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£ø‚£Ñ‚°Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚°Ä‚†Ä‚†Ä‚£ø‚°á
            ‚†Ä‚¢π‚£∑‚£§‚£§‚£§‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†ª‚†ø‚†ø‚†ü‚†õ‚†â‚†â‚†Ä‚¢Ä‚£ø‚†á
            ‚†Ä‚†Ä‚†â‚†â‚†â‚†â‚†õ‚¢ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£§‚£¥‚£∂‚†ü‚†Å‚†Ä
            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†õ‚†õ‚†õ‚†ã‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä
            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚¢ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚£ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†π‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£∑‚°Ñ‚†Ä‚†Ä‚†∏‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£á‚†Ä‚†Ä‚†Ä‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚†Ä‚¢Ä‚£º‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
            ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ø‚†ø‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
            """
            print(negativo)
            com1.disable()
            return

        arquivo = []

        i = 0
        while True:
            print("Esperando pacote... üì¶")
            time.sleep(0.5)

            head, _ = com1.getData(12)

            print(f"Datagrama recebido: {rxBuffer.hex()}")

            num_pacote, total_pacotes, payload_size = struct.unpack('>III', head)
            print(f"Pacote: {num_pacote}, Total de Pacotes: {total_pacotes}, Tamanho do Payload: {payload_size}")

            payload, _ = com1.getData(payload_size)  
            eop, _ = com1.getData(3)
            print(eop)

            if eop == b'\xAA\xBB\xCC' and num_pacote == i + 1:
                arquivo.append(payload)
                print(f"Pacote {num_pacote} de {total_pacotes} recebido com sucesso ‚úÖ")
                print("Enviando confirma√ß√£o... üì®")
                ack = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xaa\xbb\xcc'
                print(f"ACK: {ack}")
                time.sleep(0.5)
                com1.sendData(ack)
                i += 1
            else:
                print(f"‚ùåErro no pacote {num_pacote}. Solicitando novamente... üëâüëà")
                nack = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xaa\xbb\xcc'
                print(f"NACK: {nack}")
                time.sleep(0.5)
                com1.sendData(nack)

            if num_pacote == total_pacotes:
                arquivo = b''.join(arquivo)
                print("Todos os pacotes recebidos com sucesso. üéâ")
                superman = """
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚†¥‚£ñ‚£ø‚£ø‚£Ω‚£∂‚£¶‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°æ‚†ã‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£∑‚£Ä‚†Ä‚¢©‚£´‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†à‚¢≥‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†õ‚†â‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚°ô‚†ª‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£§‚£ø‚°ø‚†Ä‚†Ä‚†â‚†õ‚†õ‚¢Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£Ø‚£Ω‚°á‚†à‚¢ª‚¢∑‚£∂‚£¶‚†ù‚†Ä‚°∞‚°∂‚£∂‚°ø‚£ó‚¢∏‚¢ª‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚£ª‚°Ñ‚†Ä‚†Ä‚†Ä‚†Å‚†ò‚†Ä‚†Ä‚°á‚†Ä‚†à‚†Ä‚†Ä‚¢∏‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ª‚°Ü‚†Ä‚†Ä‚†Ä‚¢∏‚°æ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚¢â‚£â‚†â‚¢Å‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ù‚†â‚†Ä‚†Ä‚†Ä‚°æ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚¢ª‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†¥‚†ö‚†â‚†Å‚†π‚°í‚¢≤‚°Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£∏‚†É‚†Ä‚†π‚£∑‚°Ä‚†Ä‚†Ä‚†∞‚†Ä‚†Ä‚¢†‚°ø‚†Å‚£Ω‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚¢∞‚†û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚°Ñ‚¢≥‚£§‚†¥‚†í‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚¢å‚†ª‚†∑‚†∂‚†æ‚†ø‚†ø‚†ø‚°á‚†Ä‚¢π‚†≥‚£§‚°Ä‚°º‚†ì‚¢¢‚°ú‚†â‚†ì‚†í‚†¶‚£§‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚¢ò‚£¶‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£Ü‚¢≥‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚†É‚†Ä‚†à‚†Ä‚†Ä‚£∏‚†Å‚¢Ä‚°û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚¢Ä‚£†‚†æ‚†ö‚†ã‚†Ä‚†à‚†ô‚†¶‚£Ä‚†Ä‚†Ä‚†ò‚°Ü‚¢ª‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†≥‚†Ä‚†Ä‚†Ä‚¢∞‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚†É‚¢†‚†û‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚†û‚†õ‚†≥‚¢§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†ö‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†õ‚†õ‚†õ‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†ô‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†í‚†õ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚¢¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£§‚£§‚£§‚£§‚£§‚£§‚£¶‚£§‚£§‚£§‚£§‚£§‚£§‚£§‚£§‚£§‚£§‚£§‚£Ä‚£Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£¶‚°Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†ã‚°†‚¢∂‚°Ü‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚†§‚†∂‚†∂‚†∂‚†∂‚†§‚£Ñ‚°Ä‚†Ä‚†Ä‚¢∂‚°í‚£∂‚†Ü‚†Ä‚£à‚†≥‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£Ü
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†û‚¢Å‚°ú‚¢°‚†è‚†Ä‚†Ä‚¢Ä‚°¥‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢¶‚£Ä‚£Ä‚£õ‚£Å‚£Ä‚°¥‚†ã‚¢ß‚†ò‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚†É‚¢Ä‚†û‚†Ä‚°ü‚†Ä‚†Ä‚†Ä‚°û‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢£‚°à‚¢∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†≥‚£å‚†≥‚£§‚°á‚†Ä‚†Ä‚†Ä‚†ô‚†¶‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚£Ä‚°§‚†§‚¢§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†ã‚£µ‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†≥‚£å‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚¢¢‚°Ä‚°†‚†ä‚¢†‚°û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†≥‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚¢Ä‚°¥‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†±‚¢Ñ‚†Ä‚¢∂‚°§‚¢Ñ‚£Ä‚£Ä‚°§‚†§‚†¥‚†∂‚†∂‚†§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚°¥‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†≥‚£Ñ‚°â‚†¢‚†§‚†¥‚†¶‚¢Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°á‚†Ä‚£†‚†û‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚¢ê‚£≤‚£Ø‚°ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚¢¶‚°Ä‚†Ä‚¢†‚£û‚£Ä‚£Ä‚£Ä‚°§‚†û‚¢Ä‚°ú‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†à‚†ô‚†ª‚£ú‚£¥‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢¶‚°Ä‚¢∂‚°í‚†í‚£∂‚£Ñ‚°¥‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢¶‚°ì‚†û‚£≥‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                """
                print(superman)
                diretorio = "./imgs"
                if not os.path.exists(diretorio):
                    os.makedirs(diretorio)
                caminho_arquivo = os.path.join(diretorio, "recebido.jpg")
                
                with open(caminho_arquivo, "wb") as f:
                    f.write(arquivo)
                    print("Arquivo salvo com sucesso üìÅüì∏")
                    
                # Abrir imagem usando OpenCV
                print("Abrindo imagem... üñºÔ∏è")
                img = cv2.imread("recebido.jpg")
                cv2.imshow("Imagem Recebida", img)
                cv2.waitKey(0)  # Espera at√© que qualquer tecla seja pressionada
                cv2.destroyAllWindows()  # Fecha a janela
                break

        print("-------------------------")
        print("Comunica√ß√£o encerrada")
        print("-------------------------")
        com1.disable()

    except Exception as erro:
        print("ops! :-\\")
        print(erro)
        com1.disable()

if __name__ == "__main__":
    main()